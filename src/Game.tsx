import React, { useEffect, useState } from "react";
import { useSearchParams } from "react-router-dom";

import "./utils/assets/App.scss";
import balloon from "./utils/balloon";
import swal from "./utils/sweetAlert";
import common from "./utils/common";

function Game() {

		const [gridSize, setGridSize] = useState<number>(0);
		const [grid, setGrid] = useState<boolean[][]>();
		const [searchParams, setSearchParams] = useSearchParams();

		/**
		 * Í≤©ÏûêÏùò ÌÅ¨Í∏∞Î•º Î≥ÄÍ≤ΩÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§.
		 * ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†•Ìïú ÌÅ¨Í∏∞Î•º Î∞õÏïÑÏôÄÏÑú ÏÉàÎ°úÏö¥ Í≤©ÏûêÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
		 */
		const askGridSize = () => {
				swal.getGridSizePopup().then((result) => {
						if (result === undefined || isNaN(parseInt(result))) {
								return;
						}

						setGridSize(parseInt(result));
						setGrid(balloon.create(parseInt(result)));
				});
		};

		/**
		 * ÏÇ¨Ïö©ÏûêÍ∞Ä ÌíçÏÑ†ÏùÑ ÌÅ¥Î¶≠ÌñàÏùÑ Îïå Ìò∏Ï∂úÎêòÎäî Ìï®ÏàòÏûÖÎãàÎã§.
		 * ÌòÑÏû¨ ÌíçÏÑ†Ïùò ÌÅ¨Í∏∞Í∞Ä Í∞ÄÏû• ÌÅ∞ ÌíçÏÑ†Ïùò ÌÅ¨Í∏∞Î≥¥Îã§ ÏûëÏúºÎ©¥ ÏóêÎü¨Î•º ÌëúÏãúÌïòÍ≥†,
		 * Í∑∏Î†áÏßÄ ÏïäÏúºÎ©¥ ÌíçÏÑ†ÏùÑ ÌÑ∞Ìä∏Î¶¨Í≥† Í≤åÏûÑ Ï¢ÖÎ£å Ïó¨Î∂ÄÎ•º ÌôïÏù∏Ìï©ÎãàÎã§.
		 *
		 * @param rowIndex ÌÅ¥Î¶≠Îêú ÌíçÏÑ†Ïùò Ìñâ Ïù∏Îç±Ïä§
		 * @param cellIndex ÌÅ¥Î¶≠Îêú ÌíçÏÑ†Ïùò Ïó¥ Ïù∏Îç±Ïä§
		 */
		const handleBalloonClick = (rowIndex: number, cellIndex: number) => {
				const currentBalloon = allConnectedBalloons[rowIndex][cellIndex];
				const maxSize = balloon.getMaxSizeOfConnectedBalloons(allConnectedBalloons);

				if (maxSize > currentBalloon.size) {
						swal.showPopupMsg("Ìå®Î∞∞ÌïòÏòÄÏäµÎãàÎã§.");
						endGame();
				} else {
						popBalloonAndCheckEndGame(currentBalloon);
				}
		};

		/**
		 * ÌíçÏÑ†ÏùÑ ÌÑ∞Ìä∏Î¶¨Í≥† Í≤åÏûÑ Ï¢ÖÎ£å Ïó¨Î∂ÄÎ•º ÌôïÏù∏ÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§.
		 * ÌíçÏÑ†ÏùÑ ÌÑ∞Ìä∏Î¶∞ ÌõÑÏóê ÎÇ®ÏïÑÏûàÎäî ÌíçÏÑ†Ïù¥ ÏóÜÏúºÎ©¥ Í≤åÏûÑÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§.
		 *
		 * @param currentBalloon ÌÑ∞Ìä∏Î¶¥ ÌíçÏÑ†Ïùò Ï†ïÎ≥¥
		 */
		const popBalloonAndCheckEndGame = (currentBalloon: { size: number, coors: number[][] }) => {
				const newGrid = balloon.setConnectedBalloonsToFalse(grid, currentBalloon.coors);
				setGrid(newGrid);

				const remainingBalloons = balloon.getAllConnectedBalloons(newGrid);
				const remainingMaxSize = balloon.getMaxSizeOfConnectedBalloons(remainingBalloons);

				if (remainingMaxSize === 0) {
						swal.showPopupMsg("Í≤åÏûÑ ÌÅ¥Î¶¨Ïñ¥!");
						endGame();
				}
		};

		/**
		 * Í≤åÏûÑÏùÑ Ï¢ÖÎ£åÌïòÍ≥† ÏÉà Í≤åÏûÑÏùÑ ÏãúÏûëÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§.
		 */
		const endGame = () => {
				setGrid(balloon.create(gridSize));
		};

		/**
		 * URLÏóêÏÑú Í≤åÏûÑ ÏÉÅÌÉúÎ•º Í∞ÄÏ†∏ÏôÄÏÑú Í≤åÏûÑÏùÑ Ï¥àÍ∏∞ÌôîÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§.
		 */
		const setGameStateFromURL = () => {

				const gridSize = parseInt(searchParams.get("gridSize") as string);
				const grid = balloon.convertQueryStringToGrid(searchParams.get("grid") as string, gridSize);

				if (grid.length > 0) {
						setGridSize(gridSize);
						setGrid(grid);
				}
		};

		/**
		 * Í≤åÏûÑÏùÑ Ï¥àÍ∏∞ÌôîÌïòÎäî Ìï®ÏàòÏûÖÎãàÎã§.
		 */
		const initializeGame = () => {
				if (gridSize === 0 || grid === undefined) {
						askGridSize();
				}
		};

		useEffect(() => {

				if (searchParams.has("gridSize") && searchParams.has("grid")) {
						setGameStateFromURL();
				} else {
						initializeGame();
				}
		}, []);

		useEffect(() => {

				searchParams.set("gridSize", gridSize.toString());
				searchParams.set("grid", balloon.convertGridToQueryString(grid));

				setSearchParams(searchParams);
		}, [gridSize, grid]);


		if (gridSize === 0 || grid === undefined) {
				return (<div>Î°úÎî© Ï§ë...</div>);
		}

		const allConnectedBalloons = balloon.getAllConnectedBalloons(grid);


		return (
			<div className={"gameContainer"}>
					<div className={"buttonContainer"}>
							<div className="buttonInner">
									<div className={"buttonContainer-left"}>
											<button onClick={askGridSize}>Í≤©Ïûê ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω</button>
											<button onClick={endGame}>ÏÉà Í≤åÏûÑ</button>
									</div>
									<div className={"buttonContainer-right"}>
											<label className="switch">
													<input type="checkbox" onClick={common.handleDarkMode}/>
													<span className="slider"></span>
											</label>
									</div>
							</div>
					</div>
					<div className={"gridContainer"}>
							<div className={"grid"}>
									{grid.map((row, rowIndex) => (
										<div key={rowIndex} className={"row"}>
												{row.map((cell, cellIndex) => (
													<div key={cellIndex} className={"cell"}>
															<button onClick={() => handleBalloonClick(rowIndex, cellIndex)}>
																	{cell ? "üéà" : ""}
															</button>
													</div>
												))}
										</div>
									))}
							</div>
					</div>
			</div>

		);
}

export default Game;
